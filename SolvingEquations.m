% Calculation of the rotation velocity of a head-less sperm in the low-curvature approximation 

%     Copyright (C) <2019>  <Luis Alvarez, An Gong>
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <https://www.gnu.org/licenses/>.

% Please cite it as:
% An Gong et al. The steering gaits of sperm. Phil. Trans. R. Soc. B 2019 

%% Meaning of the different variables
% V=(Vx, Vy): Total sperm velocity with respect to the fluid  
% vH=(vHx,vHy): Translational velocity of the flagellum with respect to the
% fluid
% Omega (upper case): Rotation velocity with respect to the fluid
% omega (lower case): Beat frequency 
% L: Flagellar length
% C0, C1, C2, ..., Cn: Amplitudes of the different curvature terms 
% Wave number assumed k = 2*pi/L
% xipar: Friction coefficients parallel to the flagellum
% xiper: Friction coefficient perpendicular to the flagellum
% Phi: Phase between harmonics
% Psi(s,t): Tangent angle representation of the flagellum (see SI Note 3)
% s: Flagellar arc length coordinate
% t: time
% epsilon: Dimensionless scalling factor (See SI Note3)
% n=(nx,ny): Normal vectors along the flagellum
% t=(tx,ty): Tangent vector along the flagellum
% r = (rx,ry): Flagellar coordinates along the arc length
% v = (vx,vy): Flagellar velocities along the arc length
% fa = (fax,fay): Thrust density along the flagellum that is generated by movement
% of the flagellum
% Fa=(Fax,Fay): Total force applied to the flagellum resulting from movement
% ta: Torque density genertated by forces along the flagellum that result from beating
% Ta: Total torque resulting from beating
% fr = (frx,fry): Drag density along the flagellum that is generated by overall
% movement with respect to the fluid
% Fr = (Frx,Fry): Total force applied to the flagellum resulting from overall
% movement with respect to the fluid
% Tr: Instantaneous Torque due to the drag oposing overall cell rotation
% OmegaOut: Calculated rotation velocity

% Please select values for n (harmonic order) and Tethered. The later
% corresponds the boundary conditions. If the cell is pinned to the surface
% at one point, it is assumed that it can only rotate, but not translate.

clear all
syms C0 C1 CN omega s t xipar xiper Phi k epsilon
syms vHx(t,epsilon) vHy(t,epsilon)% Translational velocity
syms Omega(t,epsilon) OmegaIntermediate(t,epsilon) OmegaOut(epsilon)% Cell rotation variables
syms Vx(s,t,epsilon,vHx,vHy,Omega) Vy(s,t,epsilon,vHx,vHy,Omega)% Instantaneous velocities due to translation + rotation 
syms Psi(s,t,epsilon) rx(s,t,epsilon) ry(s,t,epsilon) vx(s,t,epsilon) vy(s,t,epsilon) 
syms tx(s,t,epsilon) ty(s,t,epsilon) nx(s,t,epsilon) ny(s,t,epsilon) 
syms fax(s,t,epsilon) fay(s,t,epsilon) Fax(t,epsilon) Fay(t,epsilon) ta(s,t,epsilon) Ta(epsilon) % Due to shape change
syms frx(s,t,epsilon, vHx, vHy, Omega) fry(s,t,epsilon, vHx, vHy, Omega) Frx(t,epsilon,vHx,vHy,Omega) Fry(t,epsilon,vHx,vHy,Omega) Tr(epsilon,vHx,vHy,Omega) %Due to drag as a result of flagellar shape change

%% Selecting the flagellar shape and boundary conditions
disp('Computing averag curvature for a sinusoidal travelling wave + a harmonic of order:')
n = 2  %Harmonic order. For the constant curvature, please use n = 0

disp('Assuming that sperm are:')
Tethered = true %Change if the cell is freely swimming

%% Defining the tangent angle representation of the flagellum
switch n
    case 0
        %% Solving for the case C(s,t) = C0 + C1*sin(ks - w0t), i.e.,
        % using the tangent angle representation:
        Psi(s,t,epsilon) = epsilon*(C0*s - (C1/k)*cos(k*s - omega*t));
        OrderExpansion = 2; % This is for the later Taylor expansions
    case 1
        Psi(s,t,epsilon) = epsilon*((C1/k)*cos(k*s - omega*t));
        OrderExpansion = 2; % This is for the later Taylor expansions
    otherwise
        %% Solving for the general case C(s,t) = C1*sin(ks - w0t) + Cnsin(ks - n*w0t), i.e.,
        % using the tangent angle representation:
        Psi(s,t,epsilon) = epsilon*(- C1/k*cos(k*s - omega*t) - CN/k*cos(k*s - n*omega*t + Phi));
        OrderExpansion = n; % This is for the later Taylor expansions
end

%% Defining Forces, Torques, Velocities of the beat, and other quantities
rx(s,t,epsilon) = int(taylor(cos(Psi),epsilon,'Order',3),s,0,s); %Flagellar x-coordinates
ry(s,t,epsilon) = int(taylor(sin(Psi),epsilon,'Order',3),s,0,s); %Flagellar y-coordinates
vx(s,t,epsilon) = diff(rx,t); %x-coordinate of flagellar velocity 
vy(s,t,epsilon) = diff(ry,t); %y-coordinate of flagellar velocity 
tx(s,t,epsilon) = diff(rx,s); %x-coordinate of the vector tangent to the flagellum 
ty(s,t,epsilon) = diff(ry,s); %y-coordinate of the vector tangent to the flagellum 
nx(s,t,epsilon) = -ty; %x-coordinate of the normal to the flagellum
ny(s,t,epsilon) = tx; %y-coordinate of the normal to the flagellum
fax(s,t,epsilon) = -xipar*(vx*tx + vy*ty)*tx - xiper*(vx*nx + vy*ny)*nx; % x-coordinate of the instantaneous force density due to beating. This is also know as thrust
fay(s,t,epsilon) = -xipar*(vx*tx + vy*ty)*ty - xiper*(vx*nx + vy*ny)*ny; % y-coordinate Instantaneous force density due to beating
Fax(t,epsilon) = taylor(int(fax,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2); %x-coordinate of the instantaneous force due to beating
Fay(t,epsilon) = taylor(int(fay,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2); %y-coordinate of the instantaneous force due to beating

ta(s,t,epsilon) = rx*fay - ry*fax; %Instantaneous Torque density due to shape change.
Ta(t,epsilon) = taylor(int(ta,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2);%Instantaneous Torque due to shape change over the whole flagellum
disp('Computed forces and torques due to shape change')

if Tethered
    Vx(s,t,epsilon) =  - Omega*ry; %  Instantaneous flagellar velocity with respect to the fluid in the material frame. It is composed by a translational + a rotational. If tethered, translationa velocity is zero.
    Vy(s,t,epsilon) =  + Omega*rx;
else
    Vx(s,t,epsilon) = vHx - Omega*ry; 
    Vy(s,t,epsilon) = vHy + Omega*rx;
end

frx(s,t,epsilon) = -xipar*(Vx*tx + Vy*ty)*tx - xiper*(Vx*nx + Vy*ny)*nx; % Instantaneous force density applied onto the flagellum due to viscous drag as the cell moves with respect to the fluid
Frx(t,epsilon,vHx,vHy,Omega) = taylor(int(frx,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2); % Total force across the arc-length

fry(s,t,epsilon) = -xipar*(Vx*tx + Vy*ty)*ty - xiper*(Vx*nx + Vy*ny)*ny;
Fry(t,epsilon,vHx,vHy,Omega) = taylor(int(fry,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2);

Tr(t,epsilon,vHx,vHy,Omega) = taylor(int(rx*fry - ry*frx,s,0,2*pi/k),epsilon,'Order',OrderExpansion + 2); %Instantaneous Torque due to the drag oposing rotation
disp('Computed forces and torques due to fluid drag done')

%% Solving equations to obtain the rotation velocity
if Tethered
    eqns = Ta(t,epsilon) + Tr(t,epsilon,vHx,vHy,Omega) == 0;
    Solution = solve(eqns,Omega);
    OmegaIntermediate(epsilon,t) = taylor(Solution,epsilon,'Order',OrderExpansion + 2);
    OmegaOut = simplify(omega/(2*pi)*int(OmegaIntermediate,t,0,2*pi/omega));
else
    eqns = [Fax(t,epsilon) + Frx(t,epsilon,vHx,vHy,Omega) == 0, Fay(t,epsilon) + Fry(t,epsilon,vHx,vHy,Omega) == 0, Ta(t,epsilon) + Tr(t,epsilon,vHx,vHy,Omega) == 0];
    Solution = solve(eqns,vHx,vHy,Omega); %Note, the instantaneous translational velocity can also be obtained here. How this velocity rotates at any given time is given by Omega.
    OmegaIntermediate(epsilon,t) = taylor(Solution.Omega,epsilon,'Order',OrderExpansion + 2);
    OmegaOut = simplify(omega/(2*pi)*int(OmegaIntermediate,t,0,2*pi/omega));
end

disp('Equations solved')
disp('Expansion of the rotation velocity as a function of the drag coefficients:')
OmegaOut(1)

%% Displaying output for a specific xipar and xiper
disp('Approximate value of the roation velocity for a drag coefficient ratio of 1.81:')
xipar=1;xiper=1.81;
vpa(subs(OmegaOut(1)),3)
%% Note: a more elegant display of the function output can be obtained in a livescript 

if Tethered
    save(strcat('HarmonicTethered',num2str(n),'.mat'))
else
    save(strcat('HarmonicFree',num2str(n),'.mat'))
end










